name: Deploy Cloudflare Worker (API)

on:
  push:
    branches: [ master, main ]
    paths:
      - 'api/**'
      - '.github/workflows/deploy-worker.yml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy API Worker
    runs-on: ubuntu-latest
    env:
      # Required for Wrangler auth
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Required Secrets
        run: |
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            echo "‚ùå ERROR: CLOUDFLARE_API_TOKEN secret is not set"
            echo "Please add this secret in GitHub repository settings:"
            echo "1. Go to Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Add CLOUDFLARE_API_TOKEN with your Cloudflare API token"
            echo "4. Get token from: https://developers.cloudflare.com/fundamentals/api/get-started/create-token/"
            exit 1
          fi
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            echo "‚ùå ERROR: CLOUDFLARE_ACCOUNT_ID secret is not set"
            echo "Please add this secret in GitHub repository settings:"
            echo "1. Go to Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "2. Click 'New repository secret'"
            echo "3. Add CLOUDFLARE_ACCOUNT_ID with your Cloudflare Account ID"
            echo "4. Find Account ID in Cloudflare Dashboard ‚Üí Right sidebar"
            exit 1
          fi
          echo "‚úÖ Required Cloudflare secrets are properly configured"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install API dependencies
        working-directory: ./api
        run: |
          npm ci

      - name: Wrangler Version
        working-directory: ./api
        run: |
          npx wrangler --version

      - name: Deploy Worker (production)
        working-directory: ./api
        run: |
          npx wrangler deploy --env production

      - name: Sync Stripe secrets to Cloudflare (optional)
        # Read secrets directly to avoid exposing at job-level env
        if: ${{ secrets.STRIPE_SECRET_KEY || secrets.STRIPE_PUBLISHABLE_KEY || secrets.STRIPE_PRICE_ID || secrets.STRIPE_WEBHOOK_SECRET }}
        working-directory: ./api
        shell: bash
        run: |
          if [ -n "${{ secrets.STRIPE_SECRET_KEY }}" ]; then 
            echo "Setting STRIPE_SECRET_KEY..."
            echo "${{ secrets.STRIPE_SECRET_KEY }}" | npx wrangler secret put STRIPE_SECRET_KEY --env production
          fi
          if [ -n "${{ secrets.STRIPE_PUBLISHABLE_KEY }}" ]; then 
            echo "Setting STRIPE_PUBLISHABLE_KEY..."
            echo "${{ secrets.STRIPE_PUBLISHABLE_KEY }}" | npx wrangler secret put STRIPE_PUBLISHABLE_KEY --env production
          fi
          if [ -n "${{ secrets.STRIPE_PRICE_ID }}" ]; then 
            echo "Setting STRIPE_PRICE_ID..."
            echo "${{ secrets.STRIPE_PRICE_ID }}" | npx wrangler secret put STRIPE_PRICE_ID --env production
          fi
          if [ -n "${{ secrets.STRIPE_WEBHOOK_SECRET }}" ]; then 
            echo "Setting STRIPE_WEBHOOK_SECRET..."
            echo "${{ secrets.STRIPE_WEBHOOK_SECRET }}" | npx wrangler secret put STRIPE_WEBHOOK_SECRET --env production
          fi

      - name: Verify Deployment
        run: |
          echo "ü©∫ Waiting for deployment to be ready..."
          sleep 10
          
          # Test API health endpoint
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Testing API health..."
            
            if curl -f -s https://grant-search-api.sorrowscry86.workers.dev/health; then
              echo ""
              echo "‚úÖ API deployment successful and healthy!"
              echo "üåê Live at: https://grant-search-api.sorrowscry86.workers.dev"
              echo ""
              echo "üìã Quick Test Commands:"
              echo "curl https://grant-search-api.sorrowscry86.workers.dev/health"
              echo 'curl "https://grant-search-api.sorrowscry86.workers.dev/api/grants/search?query=AI"'
              break
            else
              if [ $attempt -eq $max_attempts ]; then
                echo ""
                echo "‚ùå API deployment failed health check after $max_attempts attempts"
                echo "Check Cloudflare Dashboard ‚Üí Workers & Pages for more details"
                exit 1
              else
                echo "   Health check failed, retrying in 10 seconds..."
                sleep 10
                attempt=$((attempt + 1))
              fi
            fi
          done
