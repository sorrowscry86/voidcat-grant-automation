name: Deploy VoidCat Grant Automation to GitHub Pages

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying static files
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Validate Frontend Files
        run: |
          echo "üîç Validating frontend files..."
          if [ ! -f "./frontend/index.html" ]; then
            echo "‚ùå Error: frontend/index.html not found"
            exit 1
          fi
          if [ ! -f "./frontend/terms-of-service.html" ]; then
            echo "‚ùå Error: frontend/terms-of-service.html not found"
            exit 1
          fi
          if [ ! -f "./frontend/privacy-policy.html" ]; then
            echo "‚ùå Error: frontend/privacy-policy.html not found"
            exit 1
          fi
          echo "‚úÖ All required frontend files found"
          
      - name: Test API Connectivity
        run: |
          echo "üîç Testing API connectivity..."
          API_URL="https://grant-search-api.sorrowscry86.workers.dev"
          
          # Test health endpoint
          echo "Testing health endpoint: $API_URL/health"
          HEALTH_RESPONSE=$(curl -s "$API_URL/health" || echo "curl_failed")
          echo "Health response: $HEALTH_RESPONSE"
          if [[ "$HEALTH_RESPONSE" != "curl_failed" && "$HEALTH_RESPONSE" != "" ]]; then
            echo "‚úÖ API health endpoint accessible"
          else
            echo "‚ö†Ô∏è API health endpoint not accessible - continuing deployment"
          fi
          
          # Test grant search endpoint
          echo "Testing grants endpoint: $API_URL/api/grants/search"
          SEARCH_RESPONSE=$(curl -s "$API_URL/api/grants/search" || echo "curl_failed")
          echo "Search response length: ${#SEARCH_RESPONSE}"
          if [[ "$SEARCH_RESPONSE" != "curl_failed" && ${#SEARCH_RESPONSE} -gt 10 ]]; then
            echo "‚úÖ API grants endpoint accessible"
          else
            echo "‚ö†Ô∏è API grants endpoint may have issues - continuing deployment"
          fi
        
      - name: Prepare Frontend for Deployment
        run: |
          echo "üìÅ Preparing frontend files for deployment..."
          # Create a temporary directory for deployment
          mkdir -p ./deploy-temp
          # Copy frontend files to root of deployment directory
          cp -r ./frontend/* ./deploy-temp/
          # Create .nojekyll file to bypass Jekyll processing
          touch ./deploy-temp/.nojekyll
          # Validate deployment content
          if [ ! -f "./deploy-temp/index.html" ]; then
            echo "‚ùå Error: index.html missing from deployment"
            exit 1
          fi
          if ! grep -q "VoidCat RDC" "./deploy-temp/index.html"; then
            echo "‚ùå Error: index.html appears corrupted"
            exit 1
          fi
          # List files to verify deployment contents
          echo "üìã Files to be deployed:"
          ls -la ./deploy-temp/
          echo "‚úÖ Frontend files prepared and validated for deployment"
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          # Upload the prepared deployment directory
          path: './deploy-temp'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          DEPLOY_URL="${{ steps.deployment.outputs.page_url }}"
          echo "üåê Deployment URL: $DEPLOY_URL"
          
          # Wait for deployment to propagate
          echo "‚è≥ Waiting 30 seconds for deployment to propagate..."
          sleep 30
          
          # Test the deployed site with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "üîÑ Verification attempt $RETRY_COUNT of $MAX_RETRIES"
            
            RESPONSE=$(curl -s "$DEPLOY_URL" || echo "curl_failed")
            if [[ "$RESPONSE" != "curl_failed" && "$RESPONSE" == *"VoidCat RDC"* ]]; then
              echo "‚úÖ Frontend deployment verified successfully"
              SUCCESS=true
            else
              echo "‚ö†Ô∏è Verification attempt $RETRY_COUNT failed, waiting 10 seconds..."
              sleep 10
            fi
          done
          
          if [ "$SUCCESS" = "false" ]; then
            echo "‚ö†Ô∏è Frontend deployment verification incomplete - site may need more time to propagate"
          fi
        
      - name: Deployment Summary
        run: |
          echo "üéØ Frontend Deployment Complete!"
          echo "üåê Live URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üìÖ Deployed at: $(date)"
          echo "üîÑ Commit: ${{ github.sha }}"
          echo ""
          echo "üìä Platform Status:"
          echo "- Frontend: ‚úÖ Deployed to GitHub Pages"
          echo "- API: https://grant-search-api.sorrowscry86.workers.dev"
          echo ""
          echo "üöÄ Ready for user acquisition!"
